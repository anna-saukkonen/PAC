profiles {
    docker {
        process.container = "annasaukkonen/pac_pipeline:v1"
        docker.enabled = true
    }
    conda {
        process.conda = "$baseDir/environment.yaml"
    }
    singularity {
        process.container = "annasaukkonen/pac_pipeline:v1"
        singularity.cacheDir = "/scratch/project_2003316/PAC/tmp"
        singularity.autoMounts = true
        singularity.enabled = true
    }
}

params {
    genome_version      = ''
    igenomes_path       = 's3://ngi-igenomes/igenomes/'
    awsregion           = 'eu-west-1'
    outdir              = './pac_results'
    
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

includeConfig 'conf/genome_version.config'
includeConfig 'conf/base.config'



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}